---
title: "RQ3: weighting"
format: 
  html:
    embed-resources: true
    fig-width: 8
    fig-height: 8
    code-link: true
    code-fold: true
    code-tools: true
    df-print: paged
    toc: true
    grid:
      body-width: 900px
editor: source
---

# To do 

trim weights

# Load data


```{r}
#| output: false

source("0_load_data.R")

weighted_comparisons = readRDS(file = file.path("results", "3_weighted_comparisons.Rds"))
bootstrap_summary    = readRDS(file = file.path("results", "3_weighted_comparisons_bootstrap.Rds"))

original_variances   = sapply(rq5y, function(v) sd(df[[v]], na.rm = TRUE)^2)

bootstrap_summary = bootstrap_summary %>%
  group_by(var, stat) %>%
  mutate(
    pval_adj = stats::p.adjust(pval, method = "holm"),
    var_constant = original_variances[match(var,rq5y)]
  ) %>%
  ungroup() %>%
  mutate(
    y = case_when(
      stat == "var" ~ y / var_constant,
      TRUE ~ y
    ),
    ymin = case_when(
      stat == "var" ~ ymin / var_constant,
      TRUE ~ ymin
    ),
    ymax = case_when(
      stat == "var" ~ ymax / var_constant,
      TRUE ~ ymax
    ),
  ) %>%
  ungroup()

```

# Changes in means and variances

## GT table

```{r}

library(gt)

bootstrap_summary %>%
  filter(stat %in% c("md", "smd", "var")) %>%
  mutate(var = rq5y_labels_short[match(.$var, rq5y)]) %>%
  select(-pd,-pval) %>%
  select(-starts_with(".")) %>%
  pivot_wider(
    values_from = c("y","ymin","ymax","pval_adj"),
    names_from = c("stat")
  ) %>%
  # Arrange columns in order: md, smd, var
  select(var, 
         y_md, pval_adj_md, ymin_md, ymax_md,
         y_smd, pval_adj_smd, ymin_smd, ymax_smd,
         y_var, pval_adj_var, ymin_var, ymax_var) %>%
  gt() %>%
  fmt(
    columns = !contains("var") & !contains("Variable"),
    fns = function(x) {gbtoolbox::apa_num(x, n_decimal_places = 3)}
  ) %>%
  fmt(
    columns = "pval_adj_var",
    fns = function(x) {gbtoolbox::apa_num(x, n_decimal_places = 3)}
  ) %>%
  fmt_percent(
    columns = c("y_var", "ymin_var", "ymax_var"),
    decimals = 2,
    drop_trailing_zeros = FALSE,
    drop_trailing_dec_mark = FALSE
  ) %>%  # Format numeric columns
  # fmt_number(columns = starts_with("y_"), decimals = 3) %>%
  # fmt_number(columns = starts_with("ymin_"), decimals = 3) %>%
  # fmt_number(columns = starts_with("ymax_"), decimals = 3) %>%
  # fmt_scientific(columns = starts_with("pval_adj_"), decimals = 3)
  # Color code based on significance - separate rules for each statistic
  tab_style(
    style = list(cell_fill(color = "#ffcccc")),
    locations = cells_body(
      columns = c(y_md, pval_adj_md, ymin_md, ymax_md),
      rows = pval_adj_md < 0.05 & y_md < 0
    )
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#ccffcc")),
    locations = cells_body(
      columns = c(y_md, pval_adj_md, ymin_md, ymax_md),
      rows = pval_adj_md < 0.05 & y_md > 0
    )
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#ffcccc")),
    locations = cells_body(
      columns = c(y_smd, pval_adj_smd, ymin_smd, ymax_smd),
      rows = pval_adj_smd < 0.05 & y_smd < 0
    )
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#ccffcc")),
    locations = cells_body(
      columns = c(y_smd, pval_adj_smd, ymin_smd, ymax_smd),
      rows = pval_adj_smd < 0.05 & y_smd > 0
    )
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#ffcccc")),
    locations = cells_body(
      columns = c(y_var, pval_adj_var, ymin_var, ymax_var),
      rows = pval_adj_var < 0.05 & y_var < 0
    )
  ) %>%
  tab_style(
    style = list(cell_fill(color = "#ccffcc")),
    locations = cells_body(
      columns = c(y_var, pval_adj_var, ymin_var, ymax_var),
      rows = pval_adj_var < 0.05 & y_var > 0
    )
  ) %>%
  # Add column labels
  cols_label(
    var = "Variable",
    y_md = "Est", pval_adj_md = "p", ymin_md = "LB", ymax_md = "UB",
    y_smd = "Est", pval_adj_smd = "p", ymin_smd = "LB", ymax_smd = "UB", 
    y_var = "Est", pval_adj_var = "p", ymin_var = "LB", ymax_var = "UB"
  ) %>%
  # Add overarching CI headers
  tab_spanner(label = "95% CI", columns = c(ymin_md, ymax_md), id = "ci_md") %>%
  tab_spanner(label = "95% CI", columns = c(ymin_smd, ymax_smd), id = "ci_smd") %>%
  tab_spanner(label = "95% CI", columns = c(ymin_var, ymax_var), id = "ci_var") %>%
  # Add spanning headers for each statistic with formulas - simple format
  tab_spanner(label = md("Mean Difference<br>X̄<sub>weighted</sub> - X̄<sub>unweighted</sub>"), columns = c(y_md, pval_adj_md, ymin_md, ymax_md), id = "md_main") %>%
  tab_spanner(label = md("Standardized Mean Difference<br>(X̄<sub>weighted</sub> - X̄<sub>unweighted</sub>) /<br>σ<sub>unweighted</sub>"), columns = c(y_smd, pval_adj_smd, ymin_smd, ymax_smd), id = "smd_main") %>%
  tab_spanner(label = md("Variance % Change<br>(σ²<sub>weighted</sub> - σ²<sub>unweighted</sub>) /<br>σ²<sub>unweighted</sub> × 100"), columns = c(y_var, pval_adj_var, ymin_var, ymax_var), id = "var_main") %>%
  # Add footnote for p-values
  tab_footnote(
    footnote = "P values are Bonferroni-Holm adjusted within each statistic type (Mean Difference, SMD, Variance Difference, etc.",
    locations = cells_column_labels(columns = contains("pval_adj")),
    placement = "right"
  ) %>%
  # Style table - uniform formatting for spanners
  tab_style(
    style = cell_text(size = px(10), v_align = "middle"),
    locations = cells_column_spanners(spanners = c("md_main", "smd_main", "var_main"))
  ) %>%
  tab_options(
    column_labels.padding = px(0),
    table.font.size = px(9)
  ) %>%
  # Standardize column widths
  cols_width(
    var ~ px(80),
    c(y_md, y_smd, y_var) ~ px( 45),
    c(pval_adj_md, pval_adj_smd, pval_adj_var) ~ px(38),
    c(ymin_md, ymax_md, ymin_smd, ymax_smd, ymin_var, ymax_var) ~ px(45)
  )
  # tab_style(
  #   style = cell_borders(sides = "right", color = "gray", weight = px(1)),
  #   locations = cells_body(columns = c(ymax_md, ymax_smd))
  # )

```


# Changes in correlations

## plot

```{r}

test_correlation_matrix = matrix(
  nrow = length(rq5y),
  ncol = length(rq5y)
)

for(i in seq_along(rq5y)){
  for(j in seq_along(rq5y)){
    test_correlation_matrix[i,j] = paste(rq5y[i], rq5y[j], sep = "-")
  }
}

vars = test_correlation_matrix[lower.tri(test_correlation_matrix, diag = FALSE)]

  x_var = str_extract(vars, "^[^-]+")
  y_var = str_extract(vars, "[^-]+$")
  missingcode = paste0("missing",1:length(vars))

# Reusing a function from rq2y, which uses these two variables (hard-coded in the function):
rq2y = rq5y                          
rq2y_labels_short = rq5y_labels_short

bootstrap_summary %>%
  filter(stat == "cor_resid") %>%
  mutate(
    xvar = str_extract(var, "^[^-]+"),
    yvar = str_extract(var, "[^-]+$")
  ) %>%
  filter(xvar!=yvar) %>%             # These correlations should probs be removed from bootstrap code! 
  plot_lower_triangular_matrix() +
  labs(
    title = "Correlation Change",
    subtitle = expression(r[weighted] - r[original]),
    caption = NULL,
    tag = "B"
  ) +
  theme(
      plot.title = element_text(hjust = 0.5, size = 16),
      plot.subtitle = element_text(hjust = 0.5, size = 13.5, margin = margin(b = 0)),
      plot.tag = element_text(hjust = 0, vjust = 0, size = 30, face = "bold"),
      plot.tag.position = "topleft",
      panel.border = element_rect(color = "black", fill = NA, size = 1)
  ) 
  

save_plot("3_correlation_residuals", width = 8, height = 8)
  


```


## plot - original correlations

```{r}

df %>%
  select(all_of(rq5y)) %>%
  data.frame() %>%
  `colnames<-`(rq5y_labels_short) %>%
  gbtoolbox::plot_correlations(
    confidence_interval = FALSE,
    textadjust = 1.6,
    abs_colour = FALSE
  ) +
    labs(
    title = "Unweighted Pairwise correlations",
    subtitle = "Below Diagonal: Correlations.  Diagonal: Univariate Sample Sizes.  Above Diagonal: Pairwise Sample Sizes",
    caption = NULL,
    tag = "A"
  ) +
    theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "plain"),
      plot.subtitle = element_text(hjust = 0, size = 8, margin = margin(b = 0)),
      plot.caption = element_text(hjust = 1, size = 8),
      plot.tag = element_text(hjust = 0, vjust = 0, size = 30, face = "bold"),
      plot.tag.position = "topleft"
  ) 
  

save_plot("3_correlations_unweighted", width = 8, height = 8)



```



































# Old



## Weight calculation 

We are going to calculate weights for each pairwise missingness category. 

First we need to define each missingness outcome: 

```{r}


# Create matrix positions for correlation plot (adapted from RQ2)
test_correlation_matrix = matrix(
  nrow = length(rq5y),
  ncol = length(rq5y)
)

for(i in seq_along(rq5y)){
  for(j in seq_along(rq5y)){
    test_correlation_matrix[i,j] = paste(rq5y[i], rq5y[j], sep = "-")
  }
}

vars = test_correlation_matrix[lower.tri(test_correlation_matrix, diag = TRUE)]

  x_var = str_extract(vars, "^[^-]+")
  y_var = str_extract(vars, "[^-]+$")
  missingcode = paste0("missing",1:length(vars))


rm(test_correlation_matrix)

# Create columns to see if data is pairwise missing (0) or not (1)

for(i in seq_along(vars)){
  df[[missingcode[i]]] = !is.na(df[[x_var[i]]]) | !is.na(df[[y_var[i]]]) 
  df[[missingcode[i]]] = factor(as.numeric(df[[missingcode[i]]]))

}

x = df %>%
  select(starts_with("missing"))

```

### Create Imputed data (RQ1X) for family-level 

This imputation method won't impute for those with missing twins as we are missing their details in the wide format - so it just skips them! 

```{r}

df_rq5 = df %>%
  select(
    randomfamid,
    twin,
    rq1x, 
    starts_with("missing")
    ) %>%
  pivot_wider(
    id_cols = randomfamid,
    names_from = twin,
    values_from = c(atwmed1, starts_with("missing"))
  )

df_rightjoin = df %>%
  filter(twin == 1) %>%
  select(
    randomfamid,
    rq1x, 
    -atwmed1
    )
  
df_rq5 = left_join(df_rq5, df_rightjoin, by = "randomfamid")

where_matrix = is.na(df_rq5)
where_matrix[,str_detect(colnames(df_rq5),"^missing")] = FALSE

df_imputed_mice = mice(
  # select(df_rq5, -starts_with("missing")),
  df_rq5,
  method = "pmm", 
  where = where_matrix,
  m = 1,
  iter = 1
  )

df_imputed = mice::complete(
  df_imputed_mice, 
  action = 1 # just return the first imputed dataset
)

if (FALSE){
  df_imputed             %>% pull(afasoc2) %>% is.na() %>% table 
  df %>% filter(twin==1) %>% pull(afasoc2) %>% is.na() %>% table
    
  df_imputed$loggedEvents
  
  plot(df_imputed, layout = c(4,4))
  
  df_imputed %>%
    select(ends_with(c("_1", "_2"))) %>%
    sapply(., class)
}

df_imputed_long = df_imputed %>%
  mutate(across(ends_with(c("_1", "_2")), as.character)) %>%
  pivot_longer(
      cols = ends_with(c("_1", "_2")),
      names_to = c("variable", "twin"),
      names_sep = "_",
      values_to = "value"
  ) %>%
  pivot_wider(
      id_cols = !matches("variable|value"),
      names_from = variable,
      values_from = value
  ) %>%
  mutate(across(starts_with("missing"), as.factor)) %>%
  mutate(across(matches("twin|atwmed1"), ~ as.numeric(.)))

df_imputed_long = df_imputed_long %>%
  mutate(randomtwinid = as.numeric(paste0(randomfamid, twin))) %>%
  filter((.$randomtwinid %in% df$randomtwinid))


```

Tests

```{r}

test_that("Imputed data matches original data structure and values", { 
  x = df_imputed_long %>%
    mutate(randomtwinid = paste0(randomfamid, twin)) %>%
    # slice(match(df$randomtwinid, .$randomtwinid)) %>%
    mutate(across(everything(), ~as.character(.)))
  y = df %>%
    select(
      colnames(x)
    ) %>%
    mutate(across(everything(), ~as.character(.)))
  
  x[is.na(y)] = NA
  y[is.na(x)] = NA

  testthat::expect_equal(x,y, info = "Data do not match")
  
  x = df_imputed_long %>%
    sapply(., class)
  y = df %>%
    select(
      colnames(df_imputed_long)
    ) %>%
    sapply(., class)
  
  testthat::expect_equal(x,y, info = "Variable classes do not match")
  
  x = as.numeric(df_imputed_long$randomtwinid)
  y = as.numeric(df$randomtwinid)
  
  testthat::expect_equal(x,y, info = "randomtwinids match")

})



```

Check convergence

```{r}

3+3

```



```{r}

twinmodels = list()

for (i in seq_along(missingcode)){
  
  cat(i, "/", length(missingcode),"\n")
  formula <- as.formula(paste(missingcode[i], "~", paste(rq1x, collapse = "+")))
  twinmodels[[i]] = glm(formula, data = df_imputed_long, family = binomial,na.action = na.exclude)
  
  prediction = predict(twinmodels[[i]], type = "response", na.action = na.exclude)
  
  
  if (length(prediction)!=nrow(df_imputed_long)) stop("error")
  
  df[[paste0("prediction",i)]] = prediction
  df[[paste0("weight",i)]] = 1 / prediction
  
  # V_CR = clubSandwich::vcovCR(twinmodels[[i]], cluster = twinmodels[[i]]$data$famid, type = "CR2")
  # 
  # clubSandwich::coef_test(twinmodels[[i]], vcov = V_CR, test = "z")
  
}



```

# plots of predictions

Using cowplot i could arrange the histogram of all participation weights into the 

```{r}

df %>%
  select(starts_with("prediction")) %>%
  mutate(across(everything(), ~ qlogis(.))) %>%
  data.frame() %>%
  `colnames<-`((vars)) %>%
  gbtoolbox::plot_correlations(
    confidence_interval = FALSE,
    sample_size = FALSE,
    cluster_variables = TRUE
  ) + 
  labs(
    subtitle = "Correlation between twin's predicted non-missingness in each variable"
  )


df %>%
  select(starts_with("prediction")) %>%
  `colnames<-`(vars) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes( x = value)) + 
  geom_histogram() + 
  xlim(0:1) + 
  facet_wrap(~name) + 
  labs(
    subtitle = "Histogram of all missinging probabilities"
  )

df %>%
  select(starts_with("weight")) %>%
  `colnames<-`(vars) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes( x = value)) +
  geom_histogram(binwidth = 1) +
  # xlim(0:1) +
  coord_cartesian(xlim = c(0,25)) +
  facet_wrap(~name) +
  geom_vline(xintercept = 10, col = "red") + 
  labs(
    subtitle = "Histogram of all weights",
  )

df %>%
  select(starts_with("weight")) %>%
  `colnames<-`(vars) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes( x = value)) + 
  geom_histogram(bins = 1000) + 
  # xlim(0:1) + 
  # facet_wrap(~name) + 
  labs(
    subtitle = "Histogram of all weights (grouped)"
  )


# # 
# histogram_plots = df %>%
#   select(starts_with("prediction")) %>%
#   `colnames<-`(vars) %>%
#   imap(~ ggplot(data.frame(value = .x), aes(x = value)) +
#          geom_histogram() +
#          xlim(0, 1) +
#          ggtitle(.y) +
#          theme_minimal())


```

Analysis code

```{r}

vars

rq5y_index   = match(paste0(rq5y,"-",rq5y),vars)
rq5y_weights = paste0("weight",rq5y_index) # Variable to indicate the respective univariate weight for each variable in rq5y 


sd          = sapply(rq5y,            function(var)   sd(df[[var]], na.rm = TRUE))
sd_weighted = sapply(seq_along(rq5y),
                         function(i) {
                           x = as.numeric(df[[rq5y[i]]])
                           w = df[[rq5y_weights[i]]]
                           complete_cases = complete.cases(x, w)

                           if (sum(complete_cases) == 0) NA else
                             Hmisc::wtd.var(x[complete_cases], w[complete_cases])^.5
                         })

means_unweighted = sapply(rq5y,            function(var) mean(df[[var]], na.rm = TRUE))
means_weighted   = sapply(seq_along(rq5y),
                         function(i) {
                           x = as.numeric(df[[rq5y[i]]])
                           w = df[[rq5y_weights[i]]]
                           complete_cases = complete.cases(x, w)

                           if (sum(complete_cases) == 0) NA else
                             stats::weighted.mean(x[complete_cases], w[complete_cases])
                         })

correlations_unweighted = sapply(seq_along(vars), function(i) cor(df[[x_var[i]]], df[[y_var[i]]], use = "pairwise.complete.obs"))
correlations_weighted   = sapply(seq_along(vars),
                         function(i) {
                           x = as.numeric(df[[x_var[i]]])
                           y = as.numeric(df[[y_var[i]]])
                           w = df[[paste0("weight",i)]]
                           complete_cases = complete.cases(x, y, w)

                           if (sum(complete_cases) == 0) NA else
                             weights::wtd.cors(x[complete_cases],y[complete_cases], w[complete_cases])
                         })
smd = (means_weighted - means_unweighted)/sd


data.frame(
  correlations_unweighted, correlations_weighted, diff = correlations_weighted-correlations_unweighted
) %>%
 knitr::kable(digits = 3)

```


