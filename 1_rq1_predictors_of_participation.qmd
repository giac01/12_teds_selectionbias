---
title: "RQ1: Y2 predictors of attrition"
format: 
  html:
    fig-width: 8
    fig-height: 8
    code-link: true
    code-fold: true
    code-tools: true
    df-print: paged
    toc: true
    grid:
      body-width: 900px
editor: source
---

# Load Data

```{r}

source("0_load_data.R")
options(width = 900)

```

## Impute Missing Predictor Data

```{r}

daddy_issues = df_rq1 %>%
  select(adadagetw, afasoc2, afahqual)

df_rq1_imputed = df_rq1 %>%
  select(-adadagetw, -afasoc2, -afahqual) %>%
  mice(method = "pmm", m =1)

df_rq1_imputed = mice(df_rq1, method = "pmm", m = 1)

df_rq1_imputed$loggedEvents

df_rq1_imputed = complete(df_rq1_imputed)

```

## Correlation of participation over time

```{r}

df %>% 
  select(randomfamid,twin,all_of(rq1y)) %>% 
  pivot_wider(
    id_cols = randomfamid,
    names_from = twin,
    values_from = all_of(rq1y),
    names_sep = "_twin"
  ) %>%
  gbtoolbox::plot_correlations(
    sample_size = FALSE,
    confidence_interval = FALSE
  )


df %>% 
  select(randomfamid,twin,all_of(rq1y)) %>% 
  filter(twin == 1) %>%
  select(-twin, -randomfamid) %>% 
  gbtoolbox::plot_correlations(
    sample_size = TRUE,
    confidence_interval = FALSE
  )


```

# Family-Level Logistic Regressions on each outcome

### Fit Models

Fit logistic regression models to each participation outcome

```{r}

models = list()

for (i in seq_along(rq1y)){
  cat(i, "/", length(rq1y),"\n")
  formula <- as.formula(paste(rq1y[i], "~", paste(rq1x, collapse = "+")))
  models[[i]] = glm(formula, data = df_rq1_imputed, family = binomial)
}


```


### Full model results 

```{r}

# Extract all coefficients and combine
models_results = do.call(rbind, lapply(1:length(models), function(i) {
  coefs = tidy(models[[i]])
  coefs$outcome = as.character(models[[i]]$formula)[2]
  return(coefs)
}))

models_results %>% 
  select(outcome, everything()) %>%
  mutate(
    outcome = var_to_label(outcome) %>% str_remove("data.*"),
    term = df_labels[match(.$term,df_colnames)],
    term   = ifelse(is.na(term), "Intercept", term),
    p_star = as.character(symnum(p.value, cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", ".", " ")))
  ) %>% 
  knitr::kable(., digits = 3)


```


###Â Significance of individual variables

A detailed version of the figure below can be found here [here](plots/1_rq1_variable_importance.pdf){target="_blank"}.

```{r}
#| echo: false

glm_model_comparison_results = lapply(models, glm_model_comparison)

glm_model_comparison_results_df = do.call("rbind.data.frame", glm_model_comparison_results)

# glm_model_comparison_results_df$LRT_p_star = glm_model_comparison_results_df$LRT_p %>%
#   symnum(., cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", ".", " "))

# Adjust p-values and add star

glm_model_comparison_results_df = glm_model_comparison_results_df %>% 
  filter(Variables_Dropped!="None") %>%
  group_by(outcome) %>%
  mutate(LRT_p = stats::p.adjust(LRT_p, method = "holm")) %>% 
  ungroup() %>%
  mutate(
    LRT_p_star = as.character(symnum(LRT_p, cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1), symbols = c("***", "**", "*", ".", " ")))
  )

variable_importance_order = glm_model_comparison_results_df %>%
  group_by(Variables_full) %>%
  summarise(mean_score = mean(LRT_p)) %>%
  arrange(mean_score) %>%
  pull(Variables_full)
glm_model_comparison_results_df = glm_model_comparison_results_df %>%
  mutate(
    Variables_full = factor(Variables_full, levels = variable_importance_order)
  )

# Plotting code
glm_model_comparison_results_df %>%
  mutate(
    outcome_labeled = var_to_label(outcome),
    outcome_labeled = outcome_labeled %>% str_remove("data.*"),
    outcome_labeled = factor(outcome_labeled, levels =  str_remove(var_to_label(rq1y),"data.*")),
    criterion       = Delta_AUC,
    sig_level = case_when(
      LRT_p < 0.001 ~ "p < 0.001",
      LRT_p < 0.01 ~ "p < 0.01", 
      LRT_p < 0.05 ~ "p < 0.05",
      LRT_p < 0.1 ~ "p < 0.1",
      TRUE ~ "Not significant"
    ),
    sig_level = factor(sig_level, levels = c("p < 0.001", "p < 0.01", "p < 0.05", "p < 0.1", "Not significant"))
  ) %>%
  ggplot(aes(y = Variables_full, x = criterion)) + 
  geom_col(aes(fill = sig_level), alpha = 0.8) + 
  geom_text(aes(label = gsub("0\\.", ".", sprintf("%.3f", criterion))),  # Remove ALL 0. patterns
            size = 2.5, fontface = "bold", color = "black") +
  facet_wrap(~outcome_labeled, scales = "fixed", ncol = 6) +
  scale_x_continuous(labels = function(x) gsub("0\\.", ".", sprintf("%.3f", x))) +  # Remove ALL 0. patterns
  scale_fill_manual(
    values = c("p < 0.001" = "#d73027", "p < 0.01" = "#fc8d59", 
               "p < 0.05" = "#fee08b", "p < 0.1" = "#e0f3f8", 
               "Not significant" = "#d9d9d9"),
    name = "Significance\n(Holm-adjusted)"
  ) +
  labs(
    x = "Change in AUC (when variable removed)",
    y = NULL,
    title = "Variable Importance by AUC Change",
    subtitle = "Colors show Holm-adjusted significance levels"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 7),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    strip.text = element_text(size = 9, face = "bold"),
    legend.position = "bottom"
  )


ggsave(file.path("plots", "1_rq1_variable_importance.pdf"), width = 14, height = 7)

```

### Visualise predicted probabilities 

```{r}

model_predictions = lapply(models, function(x) data.frame(prediction = predict.glm(x, type = "response", se.fit = FALSE)))

names(model_predictions) = rq1y

model_predictions = list_rbind(model_predictions, names_to = "outcome")

model_predictions %>% 
  filter(outcome %in% rq1y_short) %>%
  mutate(outcome = clean_rq1y_label(var_to_label(outcome))) %>%
  ggplot(aes(x = prediction)) + 
  geom_histogram(bins = 100) + 
  scale_x_continuous(labels = gbtoolbox::apa_num, limits = c(0,1)) +
  facet_wrap(~outcome, scales = "fixed") +
  labs(title = "Distribution of predicted participation probabilties")

model_predictions %>% 
  filter(outcome %in% rq1y_short) %>%
  mutate(weight = 1 / prediction) %>%
  ggplot(aes(x = weight)) + 
  geom_histogram(bins = 100) + 
  # scale_x_continuous(labels = gbtoolbox::apa_num, limits = c(0,1)) +
  facet_wrap(~outcome, scales = "fixed") +
  labs(title = "Distribution of inverse probability weights")



# Reliability check (16 year)

# predictions_link = predict.glm(models[[9]], type = "link", se.fit = TRUE)
# 
# var_predictions = var(predictions_link$fit)
# error_var_mean  = mean(predictions_link$se.fit^2)
# 
# error_var_mean
# var_predictions/(var_predictions+error_var_mean)

```

#### Lets just compare this to a permuted version to see how different this is

```{r}
models_permuted = list()

df_rq1_imputed_permuted = df_rq1_imputed

df_rq1_imputed_permuted[rq1y] = df_rq1_imputed_permuted[sample(nrow(df_rq1_imputed),nrow(df_rq1_imputed), replace = TRUE),rq1y] 

for (i in seq_along(rq1y)){
  cat(i, "/", length(rq1y),"\n")
  formula <- as.formula(paste(rq1y[i], "~", paste(rq1x, collapse = "+")))
  models_permuted[[i]] = glm(formula, data = df_rq1_imputed_permuted, family = binomial)
}

# lapply(models_permuted, function(x) summary(x))

lapply(models_permuted, function(x) data.frame(prediction = predict.glm(x, type = "response", se.fit = FALSE))) %>%
  `names<-`(rq1y) %>%
  list_rbind(., names_to = "outcome") %>% 
  filter(outcome %in% rq1y_short) %>%
  mutate(outcome = clean_rq1y_label(var_to_label(outcome))) %>%
  ggplot(aes(x = prediction)) + 
  geom_histogram(bins = 100) + 
  facet_wrap(~outcome, scales = "fixed") + 
  scale_x_continuous(labels = gbtoolbox::apa_num, limits = c(0,1)) +
  labs(title = "Distribution of predicted participation probabilties for PERMUTED data ")


lapply(models_permuted, function(x) data.frame(prediction = predict.glm(x, type = "response", se.fit = FALSE))) %>%
  `names<-`(rq1y) %>%
  list_rbind(., names_to = "outcome") %>% 
  filter(outcome %in% rq1y_short) %>%
  mutate(
    outcome = clean_rq1y_label(var_to_label(outcome)),
    weights = 1/prediction
         ) %>%
  ggplot(aes(x = weights)) + 
  geom_histogram(bins = 100) + 
  facet_wrap(~outcome, scales = "fixed") + 
  # scale_x_continuous(labels = gbtoolbox::apa_num, limits = c(0,1)) +
  labs(title = "Distribution of inverse probability weights for PERMUTED outcome data")

```


# Descriptive Information

Total number of families in dataset: `r length(unique(df0$randomfamid))`

Total number of families with no predictor information (and are just completely removed from the analysis): `r length(which(apply(df[rq1x], 1, function(x) length(which(!is.na(x))))==0))`

Participation rates at each timepoint

```{r}

df_rq1y %>%
  sapply(., function(x) length(which(x==1))/length(which(x>=0)))

```

Other descriptive stuff

```{r}


df_rq1y %>%
  mutate(across(everything(), as.character)) %>%
  # rename_from_labels() %>%
  pivot_longer(cols = everything()) %>%
  group_by(name) %>%
  count(value) %>%
  # mutate(name_count = n()) %>%
  # filter(name_count < 10) %>%
  # select(-name_count) %>%
  knitr::kable()

df_rq1y %>%
  # select(where(is.numeric)) %>%
  mutate(across(everything(), as.character)) %>%
  mutate(across(everything(), ~as.character(replace_na(., "NA")))) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x=value)) +
  geom_bar() +
  facet_wrap(~name, ncol = 4, scales = "free")

df_rq1x %>%
  select(where(is.numeric)) %>%
  # mutate(across(everything(), as.character)) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x=value)) +
  geom_histogram() +
  facet_wrap(~name, ncol = 4, scales = "free")

df_rq1x %>%
  select(!where(is.numeric)) %>%
  rename_from_labels() %>%
  mutate(across(everything(), as.character)) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x=value)) +
  geom_bar() +
  facet_wrap(~name, ncol = 4, scales = "free") +
    theme(
    axis.text.x = element_text(
      angle = 20, 
      hjust = 1, 
      vjust = 1,     # Middle vertical alignment
      size = 8         # Adjust text size if needed
    ))

table(df$afasoc, df$afajob, useNA = "always")

df_rq1x %>%
  select(!where(is.numeric)) %>%
  # rename_from_labels() %>%
  mutate(across(everything(), as.character)) %>%
  pivot_longer(cols = everything()) %>%
  ggplot(aes(x=value)) +
  geom_bar() +
  facet_wrap(~name, ncol = 4, scales = "free") +
    theme(
    axis.text.x = element_text(
      angle = 20, 
      hjust = 1, 
      vjust = 1,     # Middle vertical alignment
      size = 8         # Adjust text size if needed
    ))


```

## Missing Data Patterns

```{r}


df_rq1x %>%
  `colnames<-`((rq1x_labels)) %>%
  as_tibble() %>%
  ggmice::plot_pattern(., rotate = TRUE)

ggsave(file.path("plots","1_rq1_misssing_data_pattern.pdf"), width = 12, height = 30)

df_rq1_imputed %>%
  select(rq1x) %>%
  data.frame() %>%
  `colnames<-`((rq1x_labels)) %>%
  as_tibble() %>%
  ggmice::plot_pattern(., rotate = TRUE)

ggsave(file.path("plots","1_rq1_misssing_data_pattern_imputed.pdf"), width = 12, height = 30)

```

# Predicting missingness of SDQ/MFQ data

## Data Prep

1 = Not missing

[Note that at Yr16,](https://datadictionary.teds.ac.uk/studies/derived_variables/16yr_derived_variables.htm#pbhsdq) the emotion subtest was not administered to parents, so the conduct one is used instead.

```{r}
#| eval: true

list_of_sdq_var = c(
  # "bsdqcemot1", 
  # "csdqcemot1", 
  # "dsdqemot1", 
  # "gpsdqemot1", 
  # "icsdqemot1", "ipsdqemot1", 
  "lcsdqemot1", "lpsdqemot1", 
  "pcbhsdqemot1", "ppbhsdqcont1", 
  "u1csdqemot1", "ucv1sdqemot1", "u1psdqemot1", 
  "zmhsdqemot1"
)

rq1m = c(
  "lcsdqemot1", "lpsdqemot1", "lcmfqt1", "lpmfqt1",
  "pcbhsdqemot1", "ppbhsdqcont1", "pcbhmfqt1", "ppbhmfqt1", 
  "u1csdqemot1", "ucv1sdqemot1", "u1psdqemot1", "u1cmfqt1", "ucv1mfqt1", 
  
  "zmhsdqemot1", "zmhmfqt1"
)

rq1m_childmeasures = c(
  "lcsdqemot1", "lcmfqt1", 
  "pcbhsdqemot1", "pcbhmfqt1", 
  "u1csdqemot1", "ucv1sdqemot1",  "u1cmfqt1", "ucv1mfqt1", 
  "zmhsdqemot1", "zmhmfqt1"
)

rq1m_parentmeasures = c(
  "lpsdqemot1",  "lpmfqt1",
  "ppbhsdqcont1","ppbhmfqt1", 
  "u1psdqemot1"
)

missing_outcomes = df %>% 
  filter(acontact == 1) %>%
  select(all_of(rq1m)) %>%
  sapply(.,function(x) as.numeric(!is.na(x)))

# missing_outcomes = sapply(xx,function(x) as.numeric(is.na(x)))
```

## Descriptives

```{r}

data.frame(
  var = rq1m,
  labels = var_to_label(rq1m),
  p_notmissing = apply(missing_outcomes, 2, function(x) length(which(x==1))/length(x)*100) %>% round()
)

# Check how concordant missingness is between twins

df %>% 
  filter(acontact == 1) %>%
  select("randomfamid", "twin", all_of(rq1m)) %>%
  # rename_from_labels() %>%
  pivot_wider(id_cols = randomfamid, values_from = rq1m, names_from = twin) %>%
  mutate(
    across(
      ends_with("1") | ends_with("2"), 
      ~as.numeric(!is.na(.))
    )
  ) %>%
  select(-randomfamid) %>%
  gbtoolbox::plot_correlations(
    confidence_interval = FALSE,
    sample_size = FALSE
  )

df %>% 
  filter(acontact == 1) %>%
  select("randomfamid", "twin", all_of(rq1m_childmeasures)) %>%
  # rename_from_labels() %>%
  pivot_wider(id_cols = randomfamid, values_from = rq1m_childmeasures, names_from = twin) %>%
  mutate(
    across(
      ends_with("1") | ends_with("2"), 
      ~as.numeric(!is.na(.))
    )
  ) %>%
  gbtoolbox::plot_correlations(
    confidence_interval = FALSE,
    sample_size = FALSE
  ) + 
  labs(title = "Child Measures Only")



  # cor(., use = "pairwise.complete.obs") %>%
  # round(., 3)
  # 
  
  
cbind.data.frame(df)

```

