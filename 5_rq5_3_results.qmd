---
title: "RQ5: complete case analysis vs imputation analysis"
format: 
  html:
    fig-width: 8
    fig-height: 8
    code-link: true
    code-fold: true
    code-tools: true
    df-print: paged
    toc: true
    grid:
      body-width: 900px
editor: source
---

# Load data


```{r}
#| output: false

source("0_load_data.R")

bootstrap_summary_df = readRDS(file = file.path("results", "5_bootstrap_summary_df.Rds"))
boot_compare_results = readRDS(file = file.path("results", "5_boot_compare_results.Rds"))

ace_comparisons = readRDS(file = file.path("results", "5_ace_comparisons.Rds"))

```

# Descriptive stats

## Missingness plots

```{r}

df %>%
  select(rq5y) %>%
  `colnames<-`(rq5y_labels_short) %>%
  as.data.frame() %>%
  gbtoolbox::plot_correlations()

df %>%
  select(rq5y) %>%
  `colnames<-`(rq5y_labels_short) %>%
  as.data.frame() %>%
  gbtoolbox::plot_missing_correlations(cluster_variables = FALSE)

# takes a long time to run with all the vairables in 
if(FALSE){
df %>% 
  select(any_of(c(rq5y, rq5z))) %>%
  select(where(is.numeric)) %>%
  select(rq5y, everything()) %>%
  as.data.frame() %>%
  gbtoolbox::plot_missing_correlations(cluster_variables = FALSE, textadjust = 0) 
}

```


```{r}
#| include: false

# Variable check function
.variable_check = function(x, name = NULL){
  if (!is.null(name)) {
    var_name <- name
  } else {
    var_name <- deparse(substitute(x))
  }
  cat("Variable:", var_name, "\n")
  cat("Class:", class(x), "\n")
  cat("Label:", attr(x,"label"), "\n")
  print(table(x, useNA = "always"))
  cat("\n")
  return(invisible(NULL))
}

# # Check variable characteristics (subset for output)
# df %>%
#   select(any_of(rq5z)) %>%
#   mutate_if(is.numeric, ~ round(.x, 1)) %>%
#   # select(150:250) %>%
#   purrr::imap(~.variable_check(.x, .y))

# Check number of unique values per variable
df %>%
  select(any_of(rq5z)) %>%
  mutate_if(is.numeric, ~ round(.x, 1)) %>%
  apply(.,2, function(x) length(unique(x))) %>% 
  table()

```

## Missing data frequency plot

[Click here for full-size plot](plots/5_3_missing_data_frequency.pdf){target="_blank"}

```{r}

df %>%
  select(any_of(rq5z)) %>%
  select(!ends_with("2")) %>% # because the data is in a long format, we don't need the twin 2 variables! 
  apply(.,2,function(x) length(which(!is.na(x)))/length(x)) %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  `colnames<-`(c("var","percent_notmissing")) %>%
  mutate(
    # var       = factor(var, levels = rq5z),
    var_label = sapply(var, function(x) ifelse(!is.null(var_to_label(x)[[1]]), var_to_label(x), x)), 
    var_label = paste0(var_label, " (", var, ")"),
    var_label = factor(var_label, levels = var_label)
  ) %>%                                                                          #pull(var_label) %>% duplicated() %>% table()
  arrange(percent_notmissing) %>%
  
  ggplot(aes(x = percent_notmissing, y = var_label)) + 
  geom_col() +
  geom_vline(aes(xintercept=.2)) +
  theme_bw() +
  labs(x="Percent of not-missing data", y = NULL)
# 
ggsave(file.path("plots", "5_3_missing_data_frequency_auxillaryvars.pdf"), height = 32, width = 12)

df %>%
  select(any_of(rq5y)) %>%
  # filter(rowSums(!is.na(.)) > 0) %>% 
  apply(.,2,function(x) length(which(!is.na(x)))/length(x)) %>%
  as.data.frame() %>%
  rownames_to_column() %>%
  `colnames<-`(c("var","percent_notmissing")) %>%
  mutate(var_label = factor(var, levels = rq5y, labels = rq5y_labels_short)) %>%
  ggplot(aes(x = percent_notmissing, y = var_label)) + 
  geom_col() +
  geom_vline(aes(xintercept=.2)) +
  geom_text(aes(label = paste0(round(percent_notmissing*100),"%")), hjust=1.2) +
  theme_bw() +
  labs(x="Percent of not-missing data", y = NULL)

ggsave(file.path("plots", "5_3_missing_data_frequency.pdf"), height = 32, width = 12)

df %>%
  select(cohort, any_of(rq5y)) %>%
  pivot_longer(cols = -cohort, names_to = "var", values_to = "value") %>%
  mutate(var = factor(var, levels = rq5y, labels = rq5y_labels_short)) %>%
  group_by(cohort, var) %>%
  summarise(
    total_n = dplyr::n(),
    not_missing_n = sum(!is.na(value)),
    percent_notmissing = not_missing_n / total_n,
    .groups = "drop"
  ) %>%
    mutate(
      # var_label = factor(var, levels = unique(var), labels = var_to_label(unique(var))),
      cohort = factor(cohort,
        levels = c("Cohort 4: twins born Sep-96 to Dec-96",
                   "Cohort 3: twins born Sep-95 to Aug-96",
                   "Cohort 2: twins born Sep-94 to Aug-95",
                   "Cohort 1: twins born Jan-94 to Aug-94"),
        labels = c("4", "3", "2", "1")
      )
    ) %>%
  ggplot(aes(x = percent_notmissing, y = var, fill = cohort)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.7) +
  geom_vline(aes(xintercept = 0.2), linetype = "dashed") +
  geom_text(
    aes(label = paste0(round(percent_notmissing*100), "%")),
    position = position_dodge(width = 0.8),
    hjust = -.2,
    size = 3
  ) +
  theme_bw() +
  labs(
    x = "Percent of not-missing data BY COHORT",
    y = NULL,
    fill = "Cohort"
  ) +
  theme(
    legend.position = "bottom",
    axis.text.y = element_text(size = 8)
  ) + 
  guides(fill = guide_legend(reverse = TRUE))

ggsave(file.path("plots", "5_3_missing_data_frequency_bycohort.pdf"), height = 13, width = 8)


``` 

## Descriptive table of imputation variables

```{r}
  get_levels_summary <- function(x) {
    if (is.factor(x)) {
      paste(levels(x), collapse = ", ")
    } else {
      unique_vals <- na.omit(unique(x))
      if (length(unique_vals) <= 6) {
        paste(unique_vals, collapse = ", ")
      } else {
        # paste(length(unique_vals), "unique values")
        paste("")
      }
    }
  }

# List of all variables for imputation
df_rq5 = df %>%
  select(any_of(rq5z))

# Descriptive information on each imputed variable
impute_df = data.frame(
  var   = colnames(df_rq5),
  label = as.character(sapply(df_rq5, function(x) attr(x, "label"))),
  levels = map_chr(df_rq5, get_levels_summary),
  class = as.character(sapply(df_rq5, function(x) class(x))),
  perc_not_missing = as.numeric(sapply(df_rq5, function(x) round(length(which(!is.na(x)))/length(x)*100))),
  sd    = round(as.numeric(sapply(df_rq5, function(x) sd(as.numeric(x), na.rm = TRUE) )),2),
  distinct_categories = as.numeric(sapply(df_rq5, function(x) length(na.omit(unique(x)))))
)

impute_df <- impute_df %>%
  mutate(variable_year = case_when(
    str_starts(var, "a") ~ "Year 1 (1st Contact)",
    str_starts(var, "b") ~ "Year 2",
    str_starts(var, "c") ~ "Year 3",
    str_starts(var, "d") ~ "Year 4",
    str_starts(var, "g") ~ "Year 7",
    str_starts(var, "h") ~ "Year 8",
    str_starts(var, "i") ~ "Year 9",
    str_starts(var, "j") ~ "Year 10",
    str_starts(var, "l") ~ "Year 12",
    str_starts(var, "n") ~ "Year 14",
    str_starts(var, "p") ~ "Year 16",
    str_starts(var, "r") ~ "Year 18",
    str_starts(var, "u") ~ "Year 21",
    str_starts(var, "z") ~ "Year 26",
    TRUE ~ "Other"
  ))


impute_df %>%
  arrange(perc_not_missing) %>%
  knitr::kable()

```

## Missing data proportions by group

Interestingly, MZ twins have more missing data than DZ twins 

```{r}

# Check proportion of missing data by sexzyg group
df %>%
  select(sexzyg, any_of(rq5y)) %>%
  group_by(sexzyg) %>%
  summarise(
    n = dplyr::n(),
    total_cells = dplyr::n() * length(rq5y),
    missing_cells = sum(is.na(c_across(any_of(rq5y)))),
    overall_prop_missing = missing_cells / total_cells,
    .groups = "drop"
  ) %>%
  knitr::kable(digits = 2)

# Gives the same results! 
# df %>%
#   select(sexzyg, any_of(rq5y)) %>%
#   pivot_longer(cols = any_of(rq5y)) %>%
#   group_by(sexzyg) %>%
#   summarise(
#     total_cells = length(value),
#     missing_cells = sum(is.na(value)),
#     overall_prop_missing = missing_cells / total_cells,
#     .groups = "drop"
#   ) %>%
#   knitr::kable(digits =2)

```

### Number of missing cells per participant for rq5y variables

For the variables `r var_to_label(rq5y)`, how many cells is each participant missing. 

```{r}

df %>%
  select(any_of(rq5y)) %>%
  mutate(missing_count = rowSums(is.na(.))) %>%
  select(missing_count) %>%
  count(missing_count) %>%
  mutate(
    percent = round(n / sum(n) * 100, 1),
    total_vars = length(rq5y)
  ) %>%
  knitr::kable(
    col.names = c("# Missing Variables Per Pps", "N pps", "% pps", "Total Variables"),
    caption = "How many missing cells does each participant have on the key outcome variables? "
  )

```


## Missing data flux

```{r}


df %>%
  select(any_of(c(rq1x,rq5z))) %>%
  mice::fluxplot()


```


## How well can we predict missingness in the outcomes? 

```{r}



```

# Compare Original vs Imputed Data

## Load imputed dataset

```{r}

# Load the imputed dataset
df_rq5_imputed <- readRDS(file.path("data", "df_rq5_imputed.Rds"))

# Create comparison datasets - only rq5y variables
original_dataset <- df %>%
  select(all_of(rq5y)) 

imputed_dataset <- df_rq5_imputed %>%
  select(all_of(rq5y))

```

## Compare univariate distributions

```{r}

# Calculate comparisons using existing functions
smd_values        = compare_smd(original_dataset, imputed_dataset)
md_values         = compare_md(original_dataset, imputed_dataset)
hellinger_values  = compare_hellinger(original_dataset, imputed_dataset)
var_values        = compare_var(original_dataset, imputed_dataset)

# Create results dataframe
comparison_results <- data.frame(
  variable = names(original_dataset),
  label    = var_to_label(names(original_dataset)),
  smd = smd_values,
  md = md_values,
  hellinger = hellinger_values,
  stringsAsFactors = FALSE
)
# Display results
comparison_results %>%
  select(-variable) %>%
  arrange(desc(abs(smd))) %>%
  knitr::kable(caption = "Comparison of Original vs Imputed Data", digits = 2)

```

## Plot distribution comparisons

[Click here for full-size plot](plots/5_rq5_histogram_comparison.pdf){target="_blank"}


```{r}

# Create long format data for plotting
original_long <- original_dataset %>%
  mutate(dataset = "Original") %>%
  pivot_longer(cols = -dataset, names_to = "variable", values_to = "value")

imputed_long <- imputed_dataset %>%
  # slice(1:1000) %>%
  mutate(dataset = "Imputed") %>%
  pivot_longer(cols = -dataset, names_to = "variable", values_to = "value")

combined_long <- bind_rows(original_long, imputed_long) %>%
  filter(!is.na(value)) %>%
  mutate(
    variable_label = factor(variable, levels = rq5y, labels = rq5y_labels_short)
  )



combined_long %>%
  ggplot(aes(x = value, fill = dataset)) +
  geom_histogram(aes(y = after_stat(density * 100)),
                 alpha = .7, position = "identity", bins = 10,
                 color = "black", size = 0.2) +
  facet_wrap(~variable_label, scales = "free", ncol = 4) +
  scale_fill_manual(values = c("Original" = "#1f77b4", "Imputed" = "#ff7f0e")) +
  theme_minimal() +
  theme(
    strip.text = element_text(size = 8, face = "bold"),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    panel.background = element_rect(fill = "grey98")
  ) +
  labs(
    title = "Distribution Comparison: Original vs Imputed Data",
    x = "Value",
    y = "Density (%)",
    fill = "Dataset"
  )

ggsave(file.path("plots", "5_rq5_histogram_comparison.pdf"), width = 12, height = 9)

```

## Plot comparison statistics

[Click here for full-size plot](plots/5_rq5_distribution_comparison.pdf){target="_blank"}

```{r}

# Plot SMDs and Hellinger distances
p1 <- comparison_results %>%
  ggplot(aes(x = reorder(label, abs(smd)), y = smd)) +
  geom_col(fill = "#1f77b4", alpha = 0.7) +
  geom_hline(yintercept = c(-0.2, 0.2), linetype = "dashed", color = "red") +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Standardized Mean Differences",
    subtitle = "Dashed lines at ±0.2 (small effect)",
    x = "Variable",
    y = "SMD (Original - Imputed)"
  )

p2 <- comparison_results %>%
  ggplot(aes(x = reorder(label, hellinger), y = hellinger)) +
  geom_col(fill = "#ff7f0e", alpha = 0.7) +
  coord_flip() +
  theme_minimal() +
  labs(
    title = "Hellinger Distances",
    subtitle = "Higher values = more different distributions",
    x = "Variable",
    y = "Hellinger Distance"
  )

# Combine plots
library(patchwork)
combined_plot <- p1 / p2

print(combined_plot)

ggsave(file.path("plots", "5_rq5_distribution_comparison.pdf"), 
       plot = combined_plot, width = 12, height = 10)

```

## Compare correlation structures (SRMR)

[Click here for full-size plot](plots/5_rq5_correlation_differences.pdf){target="_blank"}

```{r}

# Calculate SRMR using existing function
srmr <- calc_srmr2(original_dataset, imputed_dataset)

# Also calculate correlation matrices for visualization
cor_original <- cor(original_dataset, use = "complete.obs")
cor_imputed <- cor(imputed_dataset, use = "complete.obs")

cat("SRMR (correlation structure difference):", round(srmr, 4), "\n")
cat("SRMR < 0.05 indicates good fit\n")
cat("SRMR < 0.08 indicates acceptable fit\n")

# Prepare correlation data for plotting (following RQ2 approach)
# Calculate correlation residuals 
cor_residuals <- compare_correlation(original_dataset, imputed_dataset)

# Create matrix positions for correlation plot (adapted from RQ2)
test_correlation_matrix = matrix(
  nrow = length(rq5y),
  ncol = length(rq5y)
)

for(i in seq_along(rq5y)){
  for(j in seq_along(rq5y)){
    test_correlation_matrix[i,j] = paste(rq5y[i], rq5y[j], collapse = " ")
  }
}

x = test_correlation_matrix[lower.tri(test_correlation_matrix)]
x_var = str_extract(x, "^\\S+")
y_var = str_extract(x, "\\S+$")

rm(test_correlation_matrix, x)

# Create correlation comparison dataframe
correlation_comparison <- data.frame(
  x_var = x_var,
  y_var = y_var,
  y = cor_residuals,
  pval = 0.01,  # Placeholder - no significance test for single comparison
  pval_adj = 0.01,
  stringsAsFactors = FALSE
)

# Set variables for plotting function
rq2y <- rq5y  # Temporary assignment for compatibility with plotting function
rq2y_labels_short <- rq5y_labels_short

# Plot correlation differences using RQ2 approach
correlation_plot <- correlation_comparison %>%
  plot_lower_triangular_matrix(
    title = "Correlation Differences (Original - Imputed)",
    caption = "RQ5: Imputation vs Original Data",
    p_threshold = 1.0  # Show all values since we don't have significance tests
  )

print(correlation_plot)

ggsave(file.path("plots", "5_rq5_correlation_differences.pdf"), 
       plot = correlation_plot, width = 10, height = 8)

# Clean up temporary variables
rm(rq2y, rq2y_labels_short)

```

# ACE Model Comparisons

```{r}

ace_comparisons$boot_results_differences_summary %>%
  mutate(
    outcome = var_to_label(paste0(outcome,"1")),
    outcome = factor(outcome, levels = var_to_label(rq5y), labels = rq5y_labels_short)
    ) %>%
  ggplot(aes(y = y, ymin = ymin, ymax = ymax, x = outcome, group = parameter, fill = parameter)) + 
  geom_col(position = "dodge") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))


ace_comparisons$boot_results_original_summary %>%
  select(outcome, parameter, y) %>%
  mutate(
    outcome = var_to_label(paste0(outcome,"1")),
    outcome = factor(outcome, levels = var_to_label(rq5y), labels = rq5y_labels_short)
    ) %>%
  arrange(outcome) %>%
  pivot_wider(names_from = parameter, values_from = y) %>%
  knitr::kable(digits =2)


ace_comparisons$boot_results_imputed_summary %>%
  select(outcome, parameter, y) %>%
  mutate(
    outcome = var_to_label(paste0(outcome,"1")),
    outcome = factor(outcome, levels = var_to_label(rq5y), labels = rq5y_labels_short)
    ) %>%
  arrange(outcome) %>%
  pivot_wider(names_from = parameter, values_from = y) %>%
  knitr::kable(digits =2)
  

```


Lets try to understand what is happening to the correlations... 

```{r}


```



